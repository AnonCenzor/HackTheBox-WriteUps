Unified HTB write up: 

machine IP: 10.129.95.229

enumerated ports using nmap
ports:
22
8080
8443
6789


information scanned: 
22 is ssh
22 has 3 hostkeys using RSA, ECDSA, and ED25519 respectively
8080 is HTTP tomcat (Apache)
8443 is TCP with ssl-cert from Ubiquiti; http title is UniFi Network (running this)
6789 is tcop with service ibm-db2-admin? running

for this machine, we'll focus on 8443
we need to know what version of UniFi is being ran
port 8080 is open and redirects to port 8443 which is a login screen
version being ran is 6.4.54
searching "unifi 6.4.54 cve" leads us to CVE-2021-44228 (Log4j exploit)
we'll need to install the prereqs and clone the repository
doing research shows we'll need to intercept a request using BurpSuite and then use the "rememberme" field in a login request
followed this guide for the exploit but there are multiple ways to do this: https://www.sprocketsecurity.com/blog/another-log4j-on-the-fire-unifi

what we did was rather than using the cURL command, we used BurpSuite to modify the "rememberme" attribute to inject the payload
burpsuite is also used to identify whether or not it's vulnerable by sending a payload and seeing if it returns a message back to us

then we perform a tcpdump on port 389 to monitor for LDAP connections to verify that LDAP connections are being made

we then grab this repository https://github.com/veracode-research/rogue-jndi and build it
follow the example in the repository to inject the payload

we then start listening on a port using netcat so that we may receive the reverse shell

once the port is listening, modify the payload in our burpsuite interception to append the port that the example shows (spacing matters)

after receiving the reverse shell, we run ps aux to see what's running on the machine to find MongoDB running on the server on 27117, which allows us to move laterally 
running 'mongo --port 27117 ace --eval "db.admin.find().forEach(printjson);"' queries users who may have admin in the name for us to obtain hashes for the passwords
grab the hashes and can use hashid to identify how the passwords are being hashed

this is the hash for one of the users: $6$Ry6Vdbse$8enMR5Znxoo.WfCMd/Xk65GwuQEPx1M.QP8/qHiQV0PvUc3uHuonK4WcTQFN1CRk3GwQaquyVwCVq8iQgPT
sha512 is identified due to the $6$ identifier

cracking the inserted takes time and processing power therefore, we can update the admin to have a hash we know and can crack

we use the mkpasswd utility to create a hash that matches the instance since $6$ identified the hash as sha512
new hash: $6$XKMmkQyehU5ajnKk$X1LQOQ0HRmx09hftsIYda3vYfIUgFwH.pj5NRFXBGbr8b10vXrK4IxJYxUqL6KbbrU0yVtObfneHDNXtGBUnk.

mongo --port 27117 ace --eval 'db.admin.update({"_id":ObjectId("61ce278f46e0fb0012d47ee4")},{$set:{"x_shadow":"$6$XKMmkQyehU5ajnKk$X1LQOQ0HRmx09hftsIYda3vYfIUgFwH.pj5NRFXBGbr8b10vXrK4IxJYxUqL6KbbrU0yVtObfneHDNXtGBUnk."}})'

we can now login as the administrator within the web browser, we need to grab the root user's pw
we've got the SSH root pw through Settings>Site>Device Authentication and now can obtain flags
root: e50bc93c75b634e4b272d2f771c33681
user: 6ced1a6a89e666c0620cdb10262ba127

------------

what did we learn: 

- 1st step is always discovery
- if there's a tcp port, always try to connect to it
- BurpSuite is pretty much always needed
- researching outside is incredibly important especially for CVEs
- we don't always need to crack the hash, sometimes like in this exploit, we can create our own password and add them to the db (since this exploit elevated us to do so) and then use that to login
- unifi can show SSH creds in the Settings>Sites>Device Authentication section
- mkpasswd is useful for creating our own password and hashing it to add to a db



